import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent } from "@/components/ui/card"
import { FileCode, AlertCircle, AlertTriangle, Info, Link } from "lucide-react"
import type { Vulnerability } from "../../types/security-types"

interface VulnerabilityDetailsProps {
  vulnerability: Vulnerability | null
}

export function VulnerabilityDetails({ vulnerability }: VulnerabilityDetailsProps) {
  if (!vulnerability) {
    return (
      <div className="flex items-center justify-center h-[400px] text-muted-foreground">
        Select a vulnerability to view details
      </div>
    )
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return <AlertCircle className="h-5 w-5" />
      case "medium":
        return <AlertTriangle className="h-5 w-5" />
      default:
        return <Info className="h-5 w-5" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return "text-red-500 bg-red-500/10"
      case "medium":
        return "text-yellow-500 bg-yellow-500/10"
      default:
        return "text-blue-500 bg-blue-500/10"
    }
  }

  return (
    <ScrollArea className="h-[calc(100vh-2rem)]">
      <div className="space-y-6">
        {/* Header Section */}
        <div className="space-y-4">
          <div className="flex items-start gap-4">
            <div className={`p-2 rounded-lg ${getSeverityColor(vulnerability.severity)}`}>
              {getSeverityIcon(vulnerability.severity)}
            </div>
            <div className="flex-1">
              <h2 className="text-xl font-semibold">{vulnerability.title}</h2>
              <div className="flex flex-wrap gap-2 mt-2">
                {vulnerability.identifiers.CVE && (
                  <Badge variant="outline" className="bg-blue-500/5">
                    {vulnerability.identifiers.CVE}
                  </Badge>
                )}
                {vulnerability.identifiers.CWE && (
                  <Badge variant="outline" className="bg-blue-500/5">
                    {vulnerability.identifiers.CWE}
                  </Badge>
                )}
                {vulnerability.cvssScore && (
                  <Badge variant="outline" className="bg-blue-500/5">
                    CVSS {vulnerability.cvssScore}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="space-y-6">
          {/* Key Details Grid */}
          <Card>
            <CardContent className="p-4 grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Vulnerable Module</h3>
                <p className="text-sm">{vulnerability.moduleName}</p>
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Introduced Through</h3>
                <p className="text-sm">{vulnerability.introducedThrough || "N/A"}</p>
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Fixed In</h3>
                <p className="text-sm">{vulnerability.fixedIn?.join(", ") || "Not fixed"}</p>
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Exploit Maturity</h3>
                <p className="text-sm">{vulnerability.exploitMaturity || "Not Defined"}</p>
              </div>
            </CardContent>
          </Card>

          {/* Tabs Section */}
          <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="detailedPaths">Detailed Paths</TabsTrigger>
              <TabsTrigger value="remediation">Remediation</TabsTrigger>
              <TabsTrigger value="references">References</TabsTrigger>
            </TabsList>

            <TabsContent value="overview">
              <Card>
                <CardContent className="p-4 space-y-4">
                  <div>
                    <h3 className="font-semibold mb-2">Overview</h3>
                    <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                      {vulnerability.overview || vulnerability.description}
                    </p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="detailedPaths">
              <Card>
                <CardContent className="p-4 space-y-4">
                  <h3 className="font-semibold mb-2">Detailed Paths</h3>
                  {vulnerability.detailedPaths?.map((path, index) => (
                    <div key={index} className="text-sm text-muted-foreground">
                      {path}
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="remediation">
              <Card>
                <CardContent className="p-4 space-y-4">
                  <h3 className="font-semibold mb-2">Remediation</h3>
                  <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                    {vulnerability.remediation || "No remediation information available."}
                  </p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="references">
              <Card>
                <CardContent className="p-4">
                  <div className="space-y-2">
                    <h3 className="font-semibold mb-2">References</h3>
                    <ul className="space-y-2">
                      {vulnerability.references?.map((reference, index) => (
                        <li key={index}>
                          <a
                            href={reference}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center gap-2 text-sm text-primary hover:underline"
                          >
                            <Link className="h-4 w-4" />
                            {reference}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </ScrollArea>
  )
}
