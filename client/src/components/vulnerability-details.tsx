import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent } from "@/components/ui/card"
import { AlertCircle, AlertTriangle, Info } from "lucide-react"
import type { Vulnerability } from "../../types/security-types"
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import markdownStyles from './css/markdown.module.css';

interface VulnerabilityDetailsProps {
  vulnerability: Vulnerability | null
}

export function VulnerabilityDetails({ vulnerability }: VulnerabilityDetailsProps) {
  if (!vulnerability) {
    return (
      <div className="flex items-center justify-center h-[400px] text-muted-foreground">
        Select a vulnerability to view details
      </div>
    )
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return <AlertCircle className="h-5 w-5" />
      case "medium":
        return <AlertTriangle className="h-5 w-5" />
      default:
        return <Info className="h-5 w-5" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return "text-red-500 bg-red-500/10"
      case "medium":
        return "text-yellow-500 bg-yellow-500/10"
      default:
        return "text-blue-500 bg-blue-500/10"
    }
  }

  return (
      <div className="h-[calc(100vh-2rem)] space-y-6">
        {/* Header Section */}
        <div className="space-y-4">
          <div className="flex items-start gap-4">
            <div className={`p-2 rounded-lg ${getSeverityColor(vulnerability.severity)}`}>
              {getSeverityIcon(vulnerability.severity)}
            </div>
            <div className="flex-1">
              <h2 className="text-xl font-semibold">{vulnerability.title}</h2>
              <div className="flex flex-wrap gap-2 mt-2">
                {vulnerability.identifiers.CVE && (
                  <Badge variant="outline" className="bg-blue-500/5">
                    {vulnerability.identifiers.CVE}
                  </Badge>
                )}
                {vulnerability.identifiers.CWE && (
                  <Badge variant="outline" className="bg-blue-500/5">
                    {vulnerability.identifiers.CWE}
                  </Badge>
                )}
                {vulnerability.cvssScore && (
                  <Badge variant="outline" className="bg-blue-500/5">
                    CVSS {vulnerability.cvssScore}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="space-y-6">
          {/* Key Details Grid */}
          <Card>
            <CardContent className="p-4 grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Vulnerable Module</h3>
                <p className="text-sm">{vulnerability.moduleName}</p>
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Introduced Through</h3>
                <p className="text-sm">{vulnerability.from[1] || "N/A"}</p>
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Fixed In</h3>
                <p className="text-sm">{vulnerability.fixedIn?.join(", ") || "Not fixed"}</p>
              </div>
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-muted-foreground">Exploit Maturity</h3>
                <p className="text-sm">{vulnerability.exploit || "Not Defined"}</p>
              </div>
            </CardContent>
          </Card>

          {/* Tabs Section */}
          <Tabs defaultValue="overview" className="space-y-4">
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="detailedPaths">Detailed Paths</TabsTrigger>
            </TabsList>

            <TabsContent value="overview">
              <Card>
                <CardContent className="p-4 space-y-4">
                  <div>
                    <ReactMarkdown 
                      className={`${markdownStyles.markdownContent} text-sm text-muted-foreground whitespace-pre-wrap`}
                      children={vulnerability.description}
                      remarkPlugins={[remarkGfm]}  // Enable GitHub-flavored markdown features like tables
                    />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="detailedPaths">
              <Card>
                <CardContent className="p-4 space-y-4">
                  <div className={`${markdownStyles.markdownContent} text-sm text-muted-foreground whitespace-pre-wrap`}>
                    <div className="space-y-2 mb-4">
                      <h3>Introduced through</h3>
                      <p>{vulnerability.from.join(" > ")}</p>
                    </div>
                    <div className="space-y-2">
                      <h3>Remediation</h3>
                      <p>{`Upgrade to ${vulnerability.upgradePath[1]}`}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

          </Tabs>
        </div>
      </div>
  )
}

